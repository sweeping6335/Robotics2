{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nArm_1 = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nArm_2 = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\nBack_Bumper = Bumper(brain.three_wire_port.h)\nFront_Bumper = Bumper(brain.three_wire_port.g)\nleft_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nSonic = Sonar(brain.three_wire_port.a)\nfront_sensor = Distance(Ports.PORT14)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nmyVariable = 0\nFOUNDBOT = Event()\nmessage1 = Event()\nNOBOT = Event()\nready_to_flip = Event()\ndrivetrain.set_turn_velocity(30,PERCENT)\ndrivetrain.set_drive_velocity(100,PERCENT)\ndis_timer = 2\nbrain.screen.set_font(FontType.PROP40)\n\n\n\nArm_1.set_max_torque(100,PERCENT)\nArm_2.set_max_torque(100,PERCENT)\nArm_2.set_velocity(100,PERCENT)\nArm_1.set_velocity(100,PERCENT)\ndef Arm_Spin():\n    Arm_1.spin(FORWARD)\n    Arm_2.spin(FORWARD)\n\ndef Arm_Stop():\n    Arm_1.stop()\n    Arm_2.stop()\n    \ndef Down_Spin():\n    Arm_1.spin(REVERSE)\n    Arm_2.spin(REVERSE)\n\ndef Down_Stop():\n    Arm_1.stop()\n    Arm_2.stop()\n\ndef freeze_bot():\n    global myVariable, dis_timer\n    remote_control_code_enabled = False\n    brain.screen.set_fill_color(Color.RED)\n    brain.screen.draw_rectangle(0,0,479,239)\n    drivetrain.stop()\n    brain.screen.set_font(FontType.PROP60)\n    brain.screen.set_cursor(2.5,8.5)\n    brain.screen.print(dis_timer)\n    wait(dis_timer,SECONDS)\n    brain.screen.clear_screen()\n    remote_control_code_enabled = True\n    brain.screen.set_fill_color(Color.CYAN)\n    brain.screen.draw_rectangle(0,0,479,239)\n    dis_timer = dis_timer * 2\n\ndef Fsensor():\n    brain.screen.set_font(FontType.PROP30)\n    while brain.battery.capacity():\n        brain.screen.set_cursor(1,1)\n        brain.screen.print(front_sensor.object_distance(MM))\n        wait(0.1,SECONDS)\n        brain.screen.clear_row(1)\n        brain.screen.set_cursor(2,1)\n        brain.screen.print(front_sensor.object_size())\n        brain.screen.set_cursor(3,1)\n        brain.screen.print(front_sensor.object_velocity())\n        brain.screen.set_cursor(4,1)\n        brain.screen.print(Sonic.distance(MM))\n\ndef seek_bot():\n    global myVariable, FOUNDBOT, message1, NOBOT, ready_to_flip\n    while not front_sensor.is_object_detected():\n        drivetrain.turn(LEFT)\n        wait(0.01, SECONDS)\n        wait(5, MSEC)\n    while not front_sensor.object_distance(MM) < 300:\n        drivetrain.drive(FORWARD)\n        wait(0.01, SECONDS)\n        wait(5, MSEC)\n    ready_to_flip.broadcast()\n    \n\ndef when_started1():\n    global myVariable, FOUNDBOT, message1, NOBOT, ready_to_flip\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(20, PERCENT)\n    while not controller_1.buttonUp.pressing():\n        wait(5, MSEC)\n    seek_bot()\n\ndef onevent_controller_1buttonDown_pressed_0():\n    global myVariable, FOUNDBOT, message1, NOBOT, ready_to_flip\n    brain.program_stop()\n\ndef onevent_ready_to_flip_0():\n    global myVariable, FOUNDBOT, message1, NOBOT, ready_to_flip\n    for repeat_count in range(5):\n        Arm_1.spin_for(FORWARD, 90, DEGREES)\n        Arm_2.spin_for(FORWARD, 90, DEGREES)\n        wait(0.01, SECONDS)\n        Arm_1.spin_for(REVERSE, 90, DEGREES)\n        Arm_2.spin_for(REVERSE, 90, DEGREES)\n        wait(0.01, SECONDS)\n        wait(5, MSEC)\n\ndef onevent_ready_to_flip_1():\n    global myVariable, FOUNDBOT, message1, NOBOT, ready_to_flip\n    drivetrain.drive(FORWARD)\n\n\ncontroller_1.buttonR1.pressed(Arm_Spin)\nBack_Bumper.pressed(freeze_bot)\nFront_Bumper.pressed(freeze_bot)\ncontroller_1.buttonR1.released(Arm_Stop)\ncontroller_1.buttonR2.pressed(Down_Spin)\ncontroller_1.buttonR2.released(Down_Stop)\ncontroller_1.buttonB.pressed(Fsensor)\ncontroller_1.buttonDown.pressed(onevent_controller_1buttonDown_pressed_0)\nready_to_flip(onevent_ready_to_flip_0)\nready_to_flip(onevent_ready_to_flip_1)\ncontroller_1.buttonRight(when_started1)\n\n","textLanguage":"python","robotConfig":[{"port":[11],"name":"Arm_1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[12],"name":"Arm_2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"Back_Bumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22},{"port":[7],"name":"Front_Bumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22},{"port":[9,10,1,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1,2],"name":"Sonic","customName":true,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{"id":"partner"},"triportSourcePort":22},{"port":[14],"name":"front_sensor","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}